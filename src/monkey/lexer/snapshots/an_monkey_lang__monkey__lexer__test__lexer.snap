---
source: src/monkey/lexer/mod.rs
expression: result
---
let five = 5;
^^^ Token(Let, "let" [L0-0:2])
    ^^^^ Token(Identifier, "five" [L0-4:7])
         ^ Token(Assign, "=" [L0-9:9])
           ^ Token(Integer, "5" [L0-11:11])
            ^ Token(Semicolon, ";" [L0-12:12])

let ten = 10;
^^^ Token(Let, "let" [L1-0:2])
    ^^^ Token(Identifier, "ten" [L1-4:6])
        ^ Token(Assign, "=" [L1-8:8])
          ^^ Token(Integer, "10" [L1-10:11])
            ^ Token(Semicolon, ";" [L1-12:12])

let add = fn(x, y) {
^^^ Token(Let, "let" [L3-0:2])
    ^^^ Token(Identifier, "add" [L3-4:6])
        ^ Token(Assign, "=" [L3-8:8])
          ^^ Token(Function, "fn" [L3-10:11])
            ^ Token(LeftParen, "(" [L3-12:12])
             ^ Token(Identifier, "x" [L3-13:13])
              ^ Token(Comma, "," [L3-14:14])
                ^ Token(Identifier, "y" [L3-16:16])
                 ^ Token(RightParen, ")" [L3-17:17])
                   ^ Token(LeftBrace, "{" [L3-19:19])

  x + y;
  ^ Token(Identifier, "x" [L4-2:2])
    ^ Token(Plus, "+" [L4-4:4])
      ^ Token(Identifier, "y" [L4-6:6])
       ^ Token(Semicolon, ";" [L4-7:7])

};
^ Token(RightBrace, "}" [L5-0:0])
 ^ Token(Semicolon, ";" [L5-1:1])

let result = add(five, ten);
^^^ Token(Let, "let" [L7-0:2])
    ^^^^^^ Token(Identifier, "result" [L7-4:9])
           ^ Token(Assign, "=" [L7-11:11])
             ^^^ Token(Identifier, "add" [L7-13:15])
                ^ Token(LeftParen, "(" [L7-16:16])
                 ^^^^ Token(Identifier, "five" [L7-17:20])
                     ^ Token(Comma, "," [L7-21:21])
                       ^^^ Token(Identifier, "ten" [L7-23:25])
                          ^ Token(RightParen, ")" [L7-26:26])
                           ^ Token(Semicolon, ";" [L7-27:27])

!-/*5;
^ Token(Bang, "!" [L8-0:0])
 ^ Token(Minus, "-" [L8-1:1])
  ^ Token(Slash, "/" [L8-2:2])
   ^ Token(Asterisk, "*" [L8-3:3])
    ^ Token(Integer, "5" [L8-4:4])
     ^ Token(Semicolon, ";" [L8-5:5])

5 < 10 > 5;
^ Token(Integer, "5" [L9-0:0])
  ^ Token(LessThan, "<" [L9-2:2])
    ^^ Token(Integer, "10" [L9-4:5])
       ^ Token(GreaterThan, ">" [L9-7:7])
         ^ Token(Integer, "5" [L9-9:9])
          ^ Token(Semicolon, ";" [L9-10:10])

if (5 < 10) {
^^ Token(If, "if" [L11-0:1])
   ^ Token(LeftParen, "(" [L11-3:3])
    ^ Token(Integer, "5" [L11-4:4])
      ^ Token(LessThan, "<" [L11-6:6])
        ^^ Token(Integer, "10" [L11-8:9])
          ^ Token(RightParen, ")" [L11-10:10])
            ^ Token(LeftBrace, "{" [L11-12:12])

    return true;
    ^^^^^^ Token(Return, "return" [L12-4:9])
           ^^^^ Token(True, "true" [L12-11:14])
               ^ Token(Semicolon, ";" [L12-15:15])

} else {
^ Token(RightBrace, "}" [L13-0:0])
  ^^^^ Token(Else, "else" [L13-2:5])
       ^ Token(LeftBrace, "{" [L13-7:7])

    return false;
    ^^^^^^ Token(Return, "return" [L14-4:9])
           ^^^^^ Token(False, "false" [L14-11:15])
                ^ Token(Semicolon, ";" [L14-16:16])

}
^ Token(RightBrace, "}" [L15-0:0])

5 == 4;
^ Token(Integer, "5" [L17-0:0])
  ^^ Token(Equal, "==" [L17-2:3])
     ^ Token(Integer, "4" [L17-5:5])
      ^ Token(Semicolon, ";" [L17-6:6])

5 != 4;
^ Token(Integer, "5" [L18-0:0])
  ^^ Token(NotEqual, "!=" [L18-2:3])
     ^ Token(Integer, "4" [L18-5:5])
      ^ Token(Semicolon, ";" [L18-6:6])

5 <= 6;
^ Token(Integer, "5" [L19-0:0])
  ^^ Token(GreaterThanEqual, "<=" [L19-2:3])
     ^ Token(Integer, "6" [L19-5:5])
      ^ Token(Semicolon, ";" [L19-6:6])

5 >= 7;
^ Token(Integer, "5" [L20-0:0])
  ^^ Token(LessThanEqual, ">=" [L20-2:3])
     ^ Token(Integer, "7" [L20-5:5])
      ^ Token(Semicolon, ";" [L20-6:6])

fn() {
^^ Token(Function, "fn" [L22-0:1])
  ^ Token(LeftParen, "(" [L22-2:2])
   ^ Token(RightParen, ")" [L22-3:3])
     ^ Token(LeftBrace, "{" [L22-5:5])

}
^ Token(RightBrace, "}" [L24-0:0])

"this is a test";
^^^^^^^^^^^^^^^^ Token(String, "this is a test" [L26-0:15])
                ^ Token(Semicolon, ";" [L26-16:16])

let a = "this is another\n\"test\"";
^^^ Token(Let, "let" [L27-0:2])
    ^ Token(Identifier, "a" [L27-4:4])
      ^ Token(Assign, "=" [L27-6:6])
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(String, "this is another\n\"test\"" [L27-8:34])
                                   ^ Token(Semicolon, ";" [L27-35:35])

[1, 2, 3];
^ Token(LeftBracket, "[" [L28-0:0])
 ^ Token(Integer, "1" [L28-1:1])
  ^ Token(Comma, "," [L28-2:2])
    ^ Token(Integer, "2" [L28-4:4])
     ^ Token(Comma, "," [L28-5:5])
       ^ Token(Integer, "3" [L28-7:7])
        ^ Token(RightBracket, "]" [L28-8:8])
         ^ Token(Semicolon, ";" [L28-9:9])

[1, 2 * 3, 5];
^ Token(LeftBracket, "[" [L29-0:0])
 ^ Token(Integer, "1" [L29-1:1])
  ^ Token(Comma, "," [L29-2:2])
    ^ Token(Integer, "2" [L29-4:4])
      ^ Token(Asterisk, "*" [L29-6:6])
        ^ Token(Integer, "3" [L29-8:8])
         ^ Token(Comma, "," [L29-9:9])
           ^ Token(Integer, "5" [L29-11:11])
            ^ Token(RightBracket, "]" [L29-12:12])
             ^ Token(Semicolon, ";" [L29-13:13])

{foo: 5, a: "test"}
^ Token(LeftBrace, "{" [L31-0:0])
 ^^^ Token(Identifier, "foo" [L31-1:3])
    ^ Token(Colon, ":" [L31-4:4])
      ^ Token(Integer, "5" [L31-6:6])
       ^ Token(Comma, "," [L31-7:7])
         ^ Token(Identifier, "a" [L31-9:9])
          ^ Token(Colon, ":" [L31-10:10])
            ^^^^^^ Token(String, "test" [L31-12:17])
                  ^ Token(RightBrace, "}" [L31-18:18])
                    ^ Token(EndOfFile, "" [L31-20:20])

